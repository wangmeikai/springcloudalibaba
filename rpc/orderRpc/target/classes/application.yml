server:
  port: 8421

spring:
  application:
    name: orderRpc-service
  datasource:
    # type: com.alibaba.druid.pool.DruidDataSource  # 可从类路径自动检测
    druid:
      url: jdbc:mysql://121.196.105.239:3306/order_table?serverTimezone=GMT%2B8
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      password: root
      # 连接池的配置信息
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      maxActive: 20
      # 配置获取连接等待超时的时间
      maxWait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      timeBetweenEvictionRunsMillis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      minEvictableIdleTimeMillis: 300000
      validationQuery: SELECT 1 FROM DUAL
      testWhileIdle: true
      testOnBorrow: false
      testOnReturn: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      poolPreparedStatements: true
      maxPoolPreparedStatementPerConnectionSize: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall # ,log4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connectionProperties: druid.stat.mergeSql\=true;druid.stat.slowSqlMillis\=5000
      ##################  自动装配druid的监控配置  #####################################
      # 配置DruidStatFilter  排除一些静态资源，以提高效率
      web-stat-filter:
        enabled: true
        url-pattern: "/*"
        exclusions: "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*"
      # 配置DruidStatViewServlet
      stat-view-servlet:
        enable: true
        url-pattern: "/druid/*"
        # IP白名单(没有配置或者为空，则允许所有访问)
        allow: 127.0.0.1 # ,192.168.163.1
        # IP黑名单 (存在共同时，deny优先于allow)
        #deny: 192.168.1.73
        #  禁用HTML页面上的“Reset All”功能
        reset-enable: false
        # 登录名
        login-username: druid
        # 登录密码
        login-password: druid
  cloud:
    nacos:
      discovery:
        server-addr: 121.196.105.239:8848
        username: nacos
        password: nacos
        #metadata:
          #version: v1
          #其他自定义元数据: xxx
        namespace: 84eeca25-3230-4e13-9e53-b29132cd40cd
        #group: pay
        #cluster-name: NJ

#ribbon的超时时间
ribbon:
  ReadTimeout: 10000
  ConnectTimeout: 10000
#  MaxAutoRetries: 1 #同一台实例最大重试次数,不包括首次调用
#  MaxAutoRetriesNextServer: 1 #重试负载均衡其他的实例最大重试次数,不包括首次调用
#  OkToRetryOnAllOperations: false  #是否所有操作都重试
#  MaxTotalConnections: 500  #最大连接数
#  MaxConnectionsPerHost: 500  # 每个host最大连接数
#  NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RetryRule  #负载均衡策略


# 对具体的服务设置超时时间
#application-name:
#  ribbon.ReadTimeout: 8000
#  ribbon.ConnectTimeout: 6000


# mybatis配置文件和 mapper映射文件
mybatis:
  #如果Mapper.xml与Mapper.class在同一个包下且同名，spring扫描Mapper.class的同时会自动扫描同名的Mapper.xml并装配到Mapper.class。
  #如果Mapper.xml与Mapper.class不在同一个包下或者不同名，就必须使用配置mapperLocations指定mapper.xml的位置。
  mapper‐locations: classpath:mybatis/mapper/*.xml   # 指定Mapper接口对应的XML文件的位置
  # mybatis配置文件位置
  config-location: classpath:mybatis/mybatis-config.xml
  #type-aliases-package: com.wmk.pojo  #不影响运行，但是会变红


#日志
logging:
  pattern:
    console: '%logger{50} == %msg%n'
  level:
    com.wmk.mapper: debug
